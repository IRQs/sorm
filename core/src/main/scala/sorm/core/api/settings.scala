package sorm.core.api

import sorm.core._

/**
 * A list of references from a single entity, representing an abstraction over
 * a database index.
 */
sealed trait Key[ entity, fields ] {
  val fields: Seq[FieldRef[entity, _]]
}
object Key {
  case class Unique[e, v](fields: Seq[FieldRef[e, _]]) extends Key[e, v]
  case class NonUnique[e, v](fields: Seq[FieldRef[e, _]]) extends Key[e, v]
}

trait Persisted {
  val id : Long
}

/**
 * Instances of this type become constructors of the parameter type
 * mixed in with `Persisted` by means of a `mixinPersisted` method generated by a macro.
 */
// TODO: could be implemented as a case class, e.g.:
// case class Entity[a](keys: Set[Key[a, Any]], mixinPersisted: (a, Long) => a with Persisted)
trait Entity[ a ] {
  val keys : Set[ Key[ a, Any ] ]
  def mixinPersisted( value : a, id : Long ) : a with Persisted
}
